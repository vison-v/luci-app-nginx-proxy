module("luci.controller.nginx-proxy", package.seeall)

local sys = require "luci.sys"
local uci = require "luci.model.uci".cursor()
local fs = require "nixio.fs"

function index()
    entry({"admin", "services", "nginx-proxy"}, firstchild(), _("Nginx Proxy"), 60).dependent = false
    entry({"admin", "services", "nginx-proxy", "proxy"}, cbi("nginx-proxy/proxy"), _("Proxy Settings"), 10)
    entry({"admin", "services", "nginx-proxy", "ssl"}, cbi("nginx-proxy/ssl"), _("SSL Settings"), 20)
    entry({"admin", "services", "nginx-proxy", "acme"}, cbi("nginx-proxy/acme"), _("ACME Settings"), 30)
    entry({"admin", "services", "nginx-proxy", "logs"}, cbi("nginx-proxy/logs"), _("Logs"), 40)
    entry({"admin", "services", "nginx-proxy", "schedules"}, cbi("nginx-proxy/schedules"), _("Schedules"), 50)
    
    entry({"admin", "services", "nginx-proxy", "apply"}, call("action_apply"))
    entry({"admin", "services", "nginx-proxy", "clearlogs"}, call("action_clearlogs"))
    entry({"admin", "services", "nginx-proxy", "add_cron"}, call("action_add_cron"))
    entry({"admin", "services", "nginx-proxy", "del_cron"}, call("action_del_cron"))
end

-- 完整配置生成函数
function generate_config()
    local config = {"# Auto-generated by luci-app-nginx-proxy\n"}

function generate_config()
    -- 初始化配置表
    local config = {
        "# Auto-generated config at " .. os.date("%Y-%m-%d %H:%M:%S"),
        "worker_processes auto;",
        "events { worker_connections 1024; }",
        "http {",
        "    include /etc/nginx/mime.types;",
        "    default_type application/octet-stream;",
        "    sendfile on;",
        "    keepalive_timeout 65;",
        "    server_names_hash_bucket_size 64;"
    }

    -- 遍历代理规则
    uci:foreach("nginx-proxy", "proxy", function(s)
        -- 协议智能处理
        local proxy_pass = s.backend
        if s.proto == "grpc" then
            proxy_pass = "grpc_pass " .. s.backend:gsub("^http", "grpc")
            table.insert(config, "    # gRPC服务配置")
        elseif s.proto == "websocket" then
            table.insert(config, "    # WebSocket配置")
            table.insert(config, "    map $http_upgrade $connection_upgrade {")
            table.insert(config, "        default upgrade;")
            table.insert(config, "        '' close;")
            table.insert(config, "    }")
        end

        -- 构建server块
        local server_block = {
            "    server {",
            s.ipv4 == "1" and ("        listen %s;"):format(s.port) or nil,
            s.ipv6 == "1" and ("        listen [::]:%s;"):format(s.port) or nil,
            "        server_name " .. s.domain .. ";"
        }

        -- SSL智能处理
        if uci:get("nginx-proxy", "ssl", "enabled") == "1" then
            server_block[#server_block+1] = "        ssl_certificate " .. uci:get("nginx-proxy", "ssl", "cert_path") .. ";"
            server_block[#server_block+1] = "        ssl_certificate_key " .. uci:get("nginx-proxy", "ssl", "key_path") .. ";"
            server_block[#server_block+1] = "        ssl_protocols TLSv1.2 TLSv1.3;"
        end

        -- 访问控制列表
        if #s.allow > 0 then
            server_block[#server_block+1] = "        allow " .. table.concat(s.allow, ";\n        allow ") .. ";"
            server_block[#server_block+1] = "        deny all;"
        end

        -- 位置块生成
        server_block[#server_block+1] = "        location / {"
        server_block[#server_block+1] = "            " .. proxy_pass .. ";"
        
        -- 自定义Header注入
        if s.headers then
            for _, header in ipairs(s.headers) do
                server_block[#server_block+1] = "            proxy_set_header " .. header .. ";"
            end
        end

        -- 健康检查端点
        if s.health_check == "1" then
            server_block[#server_block+1] = "            health_check interval=" .. (s.check_interval or 30) .. "s uri=" .. (s.check_path or "/health") .. ";"
        end

        server_block[#server_block+1] = "        }"
        server_block[#server_block+1] = "    }"

        -- 清理nil值并合并
        config = luci.util.merge(config, luci.util.filter(server_block))
    end)

    table.insert(config, "}")
    
    -- 写入文件并验证
    local ok = fs.writefile("/etc/nginx/nginx-proxy.conf", table.concat(config, "\n"))
    if ok then
        return sys.call("nginx -t && /etc/init.d/nginx reload") == 0
    end
    return false
end
    
    -- 基础配置
    table.insert(config, "worker_processes auto;")
    table.insert(config, "error_log /var/log/nginx/error.log;")
    table.insert(config, "events { worker_connections 1024; }")
    table.insert(config, "http {")
    table.insert(config, "    include mime.types;")
    table.insert(config, "    default_type application/octet-stream;")
    table.insert(config, "    sendfile on;")
    table.insert(config, "    keepalive_timeout 65;")
    table.insert(config, "    access_log /var/log/nginx/access.log;")
    
    -- 生成代理规则
    uci:foreach("nginx-proxy", "proxy", function(s)
        local domain = s[".name"]
        local ssl_enabled = uci:get("nginx-proxy", "ssl", "enabled") or "0"
        
        table.insert(config, string.format("    # Rule for %s", domain))
        table.insert(config, "    server {")
        if s.ipv4 == "1" then
            table.insert(config, string.format("        listen %s;", s.port or 80))
        end
        if s.ipv6 == "1" then
            table.insert(config, string.format("        listen [::]:%s;", s.port or 80))
        end
        table.insert(config, string.format("        server_name %s;", s.domain))
        
        if ssl_enabled == "1" then
            table.insert(config, string.format("        ssl_certificate %s;", uci:get("nginx-proxy", "ssl", "cert_path")))
            table.insert(config, string.format("        ssl_certificate_key %s;", uci:get("nginx-proxy", "ssl", "key_path")))
            table.insert(config, "        ssl_session_cache shared:SSL:10m;")
            table.insert(config, "        ssl_session_timeout 10m;")
            table.insert(config, "        ssl_protocols TLSv1.2 TLSv1.3;")
            table.insert(config, "        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;")
        end
        
        table.insert(config, "        location / {")
        table.insert(config, string.format("            proxy_pass %s;", s.backend))
        table.insert(config, "            proxy_set_header Host $host;")
        table.insert(config, "            proxy_set_header X-Real-IP $remote_addr;")
        table.insert(config, "            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;")
        table.insert(config, "            proxy_set_header X-Forwarded-Proto $scheme;")
        table.insert(config, "        }")
        table.insert(config, "    }\n")
    end)
    
    table.insert(config, "}")
    
    -- 写入配置文件
    local ok = fs.writefile("/etc/nginx/nginx-proxy.conf", table.concat(config, "\n"))
    return ok and sys.call("nginx -t && /etc/init.d/nginx reload") == 0
end

-- 定时任务管理
function action_add_cron()
    local cron = luci.http.formvalue("cron")
    local cmd = luci.http.formvalue("command")
    
    if cron and cmd then
        local cron_file = "/etc/crontabs/root"
        local entry = string.format("%s %s", cron, cmd)
        
        if not nixio.fs.readfile(cron_file):find(entry, 1, true) then
            nixio.fs.writefile(cron_file, "\n"..entry, "a")
            sys.call("/etc/init.d/cron restart")
        end
    end
    luci.http.redirect(luci.dispatcher.build_url("admin/services/nginx-proxy/schedules"))
end

function action_del_cron()
    local line = tonumber(luci.http.formvalue("line"))
    if line then
        local cron_file = "/etc/crontabs/root"
        local content = {}
        local i = 1
        
        for l in io.lines(cron_file) do
            if i ~= line then
                table.insert(content, l)
            end
            i = i + 1
        end
        
        nixio.fs.writefile(cron_file, table.concat(content, "\n"))
        sys.call("/etc/init.d/cron restart")
    end
    luci.http.redirect(luci.dispatcher.build_url("admin/services/nginx-proxy/schedules"))
end

-- 其他功能实现...
